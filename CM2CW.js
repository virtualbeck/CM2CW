// Generated by CoffeeScript 1.12.7
(function() {
  var aws, cloudwatch, config, metricData, options, request;

  request = require('request');

  aws = require('aws-sdk');

  config = {
    environment: process.env.NODE_ENV || 'development',
    region: process.env.AWS_REGION || 'us-east-1',
    namespace: process.env.CLOUDWATCH_NAMESPACE || 'Cloudera',
    username: process.env.CLOUDERA_USERNAME || 'admin',
    password: process.env.CLOUDERA_PASSWORD,
    url: process.env.CLOUDERA_API_URL
  };

  if (config.password == null) {
    console.log('Please set CLOUDERA_PASSWORD environment variable');
    process.exit(1);
  }

  if (config.url == null) {
    console.log('Please set CLOUDERA_API_URL environment variable');
    process.exit(1);
  }

  cloudwatch = new aws.CloudWatch({
    region: config.region,
    apiVersion: '2010-08-01'
  });

  options = {
    method: 'GET',
    url: config.url,
    headers: {
      'authorization': "Basic " + new Buffer(config.username + ':' + config.password).toString("base64")
    }
  };

  metricData = [];

  request(options, function(error, response, body) {
    var healthcheck, i, item, j, len, len1, ref, ref1, results, truncatedMetricData;
    if (error) {
      throw new Error(error);
    }
    ref = JSON.parse(body).items;
    for (i = 0, len = ref.length; i < len; i++) {
      item = ref[i];
      ref1 = item.healthChecks;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        healthcheck = ref1[j];
        if (!healthcheck.suppressed) {
          metricData.push({
            Dimensions: [
              {
                Name: 'healthcheck_name',
                Value: healthcheck.name
              }, {
                Name: 'environment',
                Value: config.environment
              }
            ],
            Value: (healthcheck.summary === 'GOOD' ? 1 : 0),
            MetricName: 'ClouderaServiceStatus'
          });
        }
      }
    }
    results = [];
    while (metricData.length > 0) {
      truncatedMetricData = metricData.slice(0, 20);
      metricData = metricData.slice(20);
      results.push(cloudwatch.putMetricData({
        Namespace: config.namespace,
        MetricData: truncatedMetricData
      }, function(err, data) {
        if (err) {
          console.log(err, err.stack);
        }
        if (data) {
          return console.log(data);
        }
      }));
    }
    return results;
  });

}).call(this);
